Index: app/src/main/java/com/example/micovid/asincronico/AsincroTaskLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.micovid.asincronico;\n\nimport android.os.AsyncTask;\n\nimport com.example.micovid.actividadprincipal.MainActivity;\nimport com.example.micovid.login.LoginActivity;\nimport com.example.micovid.registrar.RegistrarActivity;\n\npublic class AsincroTaskLogin extends AsyncTask<Object, Void, Boolean> {\n    private LoginActivity loginActivity;\n\n\n    public AsincroTaskLogin(LoginActivity loginActivity) {\n        this.loginActivity = loginActivity;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        this.loginActivity.toggleProgressBar(true);\n        this.loginActivity.habilitarBotones(false);\n    }\n\n    @Override\n    protected Boolean doInBackground(Object... objects) {\n        try {\n            Thread.sleep(2000);\n            return false;\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    @Override\n    protected void onPostExecute(Boolean aBoolean) {\n        this.loginActivity.toggleProgressBar(false);\n        if(aBoolean) {\n            this.loginActivity.lanzarActivity(MainActivity.class);\n            this.loginActivity.showMessage(\"Datos correctos\");\n        } else {\n            this.loginActivity.showMessage(\"Datos incorrectos\");\n            this.loginActivity.habilitarBotones(true);\n        }\n        super.onPostExecute(aBoolean);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/micovid/asincronico/AsincroTaskLogin.java	(revision 632111afa341c937639ca57f052d248ce196bcb6)
+++ app/src/main/java/com/example/micovid/asincronico/AsincroTaskLogin.java	(date 1623451355986)
@@ -1,15 +1,25 @@
 package com.example.micovid.asincronico;
 
 import android.os.AsyncTask;
+import android.util.Log;
 
 import com.example.micovid.actividadprincipal.MainActivity;
 import com.example.micovid.login.LoginActivity;
-import com.example.micovid.registrar.RegistrarActivity;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
 
 public class AsincroTaskLogin extends AsyncTask<Object, Void, Boolean> {
     private LoginActivity loginActivity;
 
-
+    HttpURLConnection connection;
     public AsincroTaskLogin(LoginActivity loginActivity) {
         this.loginActivity = loginActivity;
     }
@@ -22,16 +32,99 @@
 
     @Override
     protected Boolean doInBackground(Object... objects) {
+
+        HttpURLConnection con = null;
+        JSONObject obj = new JSONObject();
+        String result;
         try {
-            Thread.sleep(2000);
-            return false;
+            obj.put("email", "snalbarracin@gmail.com");
+            obj.put("password", "Hola1234");
+
+            URL url = new URL("http://so-unlam.net.ar/api/api/login");
+            connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
+            connection.setDoOutput(true);
+            connection.setDoInput(true);
+            connection.setConnectTimeout(5000);
+            connection.setRequestMethod("POST");
+
+            DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());
+            dataOutputStream.write(obj.toString().getBytes("UTF-8"));
+
+            Log.i("debug104", "Se envia al servidor " + obj.toString()+"///////////////////////////////////////////////////////////////////////////////////////");
+
+            dataOutputStream.flush();
+            connection.connect();
 
-        } catch (InterruptedException e) {
+            int responseCode = connection.getResponseCode();
+
+            if( responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED ){
+                Log.i("debug104","///////////////////////////////////////////////////////////////////////////////////////");
+                InputStreamReader inputStreamReader = new InputStreamReader(connection.getInputStream());
+                result = convertInputStreamToString(inputStreamReader).toString();
+
+            }else if( responseCode == HttpURLConnection.HTTP_BAD_REQUEST ){
+                Log.i("debug104", "///////////////////////////////////////////////////////////////////////////////////////");
+                InputStreamReader inputStreamReader = new InputStreamReader(connection.getErrorStream());
+                result = convertInputStreamToString(inputStreamReader).toString();
+
+            }
+            else{
+                result = "NOT_OK";
+                Log.i("debug104", "///////////////////////////////////////////////////////////////////////////////////////");
+            }
+
+            dataOutputStream.close();
+            connection.disconnect();
+
+            JSONObject answer = new JSONObject(result);
+
+            result = answer.get("success").toString();
+
+            Log.i("debug166", result);
+        } catch (JSONException | IOException e) {
             e.printStackTrace();
+            Log.i("debug104", String.valueOf(e));
+            result = "false";
         }
-        return false;
-    }
+
+        if(result.matches("true")){
+            return true;
+        }
+        else{
+            return false;
+        }
 
+    }
+    public static StringBuilder convertInputStreamToString(InputStreamReader inputStreamReader) throws IOException {
+        BufferedReader br = new BufferedReader(inputStreamReader);
+        StringBuilder stringBuilder = new StringBuilder();
+        String line;
+        while ( (line = br.readLine()) != null ){
+            stringBuilder.append(line + "\n");
+        }
+        br.close();
+        return stringBuilder;
+    }
+    /*public static  String get(String url)
+    {
+        HttpURLConnection connection;
+        URL miURL;
+        try{
+            miURL=new URL(url);
+            connection = (HttpURLConnection) miURL.openConnection();
+            connection.setReadTimeout(10000);
+            connection.setConnectTimeout(10000);
+            connection.setDoInput(true);
+            connection.setRequestMethod("GET");
+
+        }
+        catch (Exception e){
+
+        }
+        return "";
+    }*/
+
     @Override
     protected void onPostExecute(Boolean aBoolean) {
         this.loginActivity.toggleProgressBar(false);
